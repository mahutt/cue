name: Deploy to EC2

on:
  push:
    branches: [release]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > github-ec2.pem && chmod 600 github-ec2.pem
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} '
          echo "Current directory: $(pwd)"
          echo "Listing home directory:"
          ls -la ~

          echo "Installing Development Tools..."
          sudo yum groupinstall "Development Tools" -y

          echo "Installing Git..."
          if ! command -v git &> /dev/null; then
            sudo yum install -y git
          fi

          echo "Installing Node.js..."
          if ! command -v nvm &> /dev/null; then
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          fi
          nvm install node

          echo "Installing PM2..."
          if ! command -v pm2 &> /dev/null; then
          npm install -g pm2
          fi

          echo "Installing nginx..."
          sudo dnf install nginx -y

          # sudo dnf install certbot python3-certbot-nginx -y worked here

          echo "Starting and enabling nginx..."
          sudo systemctl start nginx
          sudo systemctl enable nginx

          echo "Creating nginx configuration for reverse proxy..."
          sudo tee /etc/nginx/conf.d/express-proxy.conf > /dev/null <<'EOF'
          server {
              listen 80;
              server_name cue.is;

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
                  proxy_read_timeout 86400;
              }
          }
          EOF

          # sudo dnf install certbot python3-certbot-nginx -y worked here

          echo "Removing default nginx configuration..."
          sudo rm -f /etc/nginx/conf.d/default.conf
          sudo rm -f /etc/nginx/sites-enabled/default

          echo "Testing nginx configuration..."
          sudo nginx -t

          if [ $? -eq 0 ]; then
              echo "Configuration test passed. Reloading nginx..."
              sudo systemctl reload nginx
              echo "Nginx successfully configured as reverse proxy!"
              echo "HTTP traffic on port 80 will now be forwarded to localhost:3000"
          else
              echo "Configuration test failed. Please check the nginx configuration."
              exit 1
          fi

          # sudo dnf install certbot python3-certbot-nginx -y worked here

          echo "Checking nginx status..."
          # sudo systemctl status nginx --no-pager

          # Install Certbot for Let's Encrypt
          echo "Installing Certbot..."
          sudo dnf install certbot python3-certbot-nginx -y

          # Get SSL certificate
          echo "Getting SSL certificate for cue.is..."
          sudo certbot --nginx -d cue.is --non-interactive --agree-tos --email tommy.mahut@gmail.com

          # Auto-renewal setup
          echo "Setting up auto-renewal..."
          sudo systemctl enable --now certbot-renew.timer

          REPO_URL="https://github.com/mahutt/cue.git"
          BRANCH="release"
          REPO_DIR="$HOME/github-aws-ec2"

          if [ -d "$REPO_DIR/.git" ]; then
            cd "$REPO_DIR"
            git pull origin "$BRANCH"
          else
            git clone "$REPO_URL" "$REPO_DIR"
            cd "$REPO_DIR"
          fi

          npm install

          echo "Starting/restarting cue API with PM2..."
          pm2 stop cue-api 2>/dev/null || true
          pm2 delete cue-app 2>/dev/null || true
          pm2 start npm --name "cue-app" -- start
          pm2 save
          pm2 startup systemd -u $USER --hp $HOME

          echo "Application deployed successfully!"
          pm2 list
          '
